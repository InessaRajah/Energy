#tutorial for deploying smart contracts 

import json
from web3 import Web3

ganache_url = "http://127.0.0.1:7545"

web3 =Web3(Web3.HTTPProvider(ganache_url))

#Check if node is connected
print(web3.isConnected())

#get smart contract abi and bytecode

abi = json.loads('[{"constant":false,"inputs":[{"name":"_greeting","type":"string"}],"name":"setGreeting","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"greet","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"greeting","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]')

bytecode = '6060604052341561000f57600080fd5b60408051908101604052600581527f48656c6c6f0000000000000000000000000000000000000000000000000000006020820152600090805161005692916020019061005c565b506100f7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009d57805160ff19168380011785556100ca565b828001600101855582156100ca579182015b828111156100ca5782518255916020019190600101906100af565b506100d69291506100da565b5090565b6100f491905b808211156100d657600081556001016100e0565b90565b61037f806101066000396000f3006060604052600436106100565763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a4136862811461005b578063cfae3217146100ae578063ef690cc014610138575b600080fd5b341561006657600080fd5b6100ac60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061014b95505050505050565b005b34156100b957600080fd5b6100c1610162565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100fd5780820151838201526020016100e5565b50505050905090810190601f16801561012a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561014357600080fd5b6100c161020b565b600081805161015e9291602001906102a9565b5050565b61016a610327565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b505050505090505b90565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102a15780601f10610276576101008083540402835291602001916102a1565b820191906000526020600020905b81548152906001019060200180831161028457829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102ea57805160ff1916838001178555610317565b82800160010185558215610317579182015b828111156103175782518255916020019190600101906102fc565b50610323929150610339565b5090565b60206040519081016040526000815290565b61020891905b80821115610323576000815560010161033f5600a165627a7a72305820563095347bc3c6bb1a5aec4c91c7f8717f8293a474dadeadaa7e88c46372d49f0029'
 

#set default account to deply smart contract from
#smart contract constructor is called when we deploy smart contract to blockchain

web3.eth.defaultAccount = web3.eth.accounts[0]

Greeter = web3.eth.contract(abi = abi, bytecode = bytecode)

tx_hash = Greeter.constructor().transact()

tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)

contract = web3.eth.contract(address=tx_receipt.contractAddress, abi = abi)

print(contract.functions.greet().call())

tx_hash = contract.functions.setGreeting("HIII").transact()

tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)

print(contract.functions.greet().call())

